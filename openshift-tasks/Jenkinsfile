#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")
      //Set the tag for the development image: version + build number**
      def devTag  = "${version}" + currentBuild.number
      // Set the tag for the production image: version
      def prodTag = "${version}"
      def GUID = "573d" 
      //Set values for projects...
      def devProject = "${GUID}-jenkins-dev"
      def prodProject = "${GUID}-jenkins-prod"
      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        //Execute Maven Build**
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      //The next two stages should run in parallel**
      parallel {      
        // Using Maven run the unit tests
        stage('Unit Tests') {
            echo "Running Unit Tests"

            //Execute Unit Tests**
            sh "${mvnCmd} test"
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
        }

        // Using Maven to call SonarQube for Code Analysis
        stage('Code Analysis') {
            echo "Running Code Analysis"

            //Execute Sonarqube Tests**
            script{
                sh "${mvnCmd} sonar:sonar -Dsonar.host.url= -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
            }
        }
    }  

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        //Publish to Nexus**
        sh "${mvnCmd} deploy -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/maven-all-public"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        //Build Image, tag Image**
        script{
            openshift.withCluster() {
                openshift.withProject("${}"){
                    openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true",)
                    openshift.tags("tasks:latest", "tasks:${devTag}")
                }
            }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project" 
        //Deploy to development Project**
        script{
            //Set Image**
            openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${GUID}-jenkins/tasks:${devTag}")
            //Set Version**
            echo "Setting the Version:"
            version = '${devTag} (tasks-dev)'

            openshift.selector("dc", "tasks").rollout().latest()
            def dc = openshift.selector("dc", "tasks").object()
            def dc_version = dc.status.latestVersion
            def rc = openshift.selector("rc", "tasks-${dc_version}").object()


        }
        //      Make sure the application is running and ready before proceeding**
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        //Copy image to Nexus container registry**
        echo "Copy image to Nexus Docker Registry:"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:b7e39788-b7fd-49bb-9a10-253e6a515af0 docker://image-registry.openshift-image-registry.svc:5000/${GUID}-jenkins/tasks:${devTag} docker://https://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"


        // Tag the built image with the production tag**
        openshift.withCluster() {
            openshift.withProject("${prodProject}") {
                openshift.tag("${GUID}-jenkins/tasks:${devTag}", "${GUID}-jenkins/tasks:${prodTag}")
            }
        }
    }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        //Determine which application is active**
        //      Set Image, Set VERSION**
        echo "Get activeApp"
        activeApp = openshift.selector("route", "tasks").object().spec.to.name
        if (activeApp== "tasks-green"){
            destApp="tasks-blue"
            version = '${prodTag} (tasks-blue)'
        } else{
            destApp = "tasks-green"
            version = '${prodTag} (tasks-green)'
        }
        openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${GUID}-jenkins/tasks:${devTag}")
        echo "Active Application: " + activeApp
        echo "Destination Application: " + destApp
        //      Deploy into the other application**
        openshift.selector("dc", "${destApp}").rollout().latest()

        //      Make sure the application is running and ready before proceeding**
        def dc_prod = openshift.selector("dc", "${destApp}").object()
        def dc_version = dc_prod.status.latestVersion
        def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
        echo "Waiting for ${destApp} to be ready"
        while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
            sleep 5
            rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        //Execute switch**
        steps {

            echo "Switching Production application to ${destApp}."
            script {
                openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                def route = openshift.selector("route/tasks").object()
                route.spec.to.name="${destApp}"
                openshift.apply(route)
                }
                }
            }   
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
